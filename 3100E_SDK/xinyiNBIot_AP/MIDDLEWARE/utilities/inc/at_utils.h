/*
 * @brief  AT命令解析的工具类小函数
*/

#pragma once

#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>
#include <stdarg.h>




/******************************************************************************************************************************
 * @brief     按照fmt格式解析buf中每个参数值，类似scanf格式
 * @param  buf   AT命令参数字符串
 * @param  fmt   参数解析格式化字符串，接口内部会按照该格式解析每个参数值，类似scanf格式中间结果字符串；
 *               %d，用于解析整形变量，中间可以携带1/2/4三个数字，分别指示char、hsort、int三种整形变量，例如%1d
 *               %s，用于解析字符串参数，由用户保证指针参数内存空间不会越界
 *               %p，用于解析长字符串参数，直接将字符串首地址赋值给二级指针，以避免一次大内存拷贝
 *               %h，用于解析16进展码流字符串，接口内部转换为普通码流字符串
 *
 * @warning   通常用于URC主动上报的参数解析，即由urc_reg_list中注册的各个函数进行调用
 ******************************************************************************************************************************/
int at_parse_param(char *fmt, char *buf, ...);


/******************************************************************************************************************************
 * @brief     仅用于含转义字符串参数的解析,如“+QLAURC:”的参数解析
 * @param  buf   AT命令参数字符串
 * @param  fmt   参数解析格式化字符串，接口内部会按照该格式解析每个参数值，类似scanf格式中间结果字符串；
 *               %d，用于解析整形变量，中间可以携带1/2/4三个数字，分别指示char、hsort、int三种整形变量，例如%1d
 *               %s，用于解析字符串参数，由用户保证指针参数内存空间不会越界
 *               %p，用于解析长字符串参数，直接将字符串首地址赋值给二级指针，以避免一次大内存拷贝
 *               %h，用于解析16进展码流字符串，接口内部转换为普通码流字符串
 *
 * @attention  仅限于极个别的特殊URC参数解析，其他命令不得使用，否则影响性能
 ******************************************************************************************************************************/
int at_parse_param_esc(char *fmt, char *buf, ...);




/******************************************************************************************************************************
  * @brief   获取第skip_num+1个参数首地址
  * @param   str   源字符串
  * @param   symbol   特征分割字符，如','
  * @param   skip_num   为需要解析的参数个数-1，表示跳过前面的参数个数
  * @return  NULL表示未找到，有效值为对应参数首地址
 ******************************************************************************************************************************/
char* find_special_symbol(char* str,char symbol,int skip_num);


/******************************************************************************************************************************
  * @brief   用于某指定参数的匹配，返回值为src匹配成功的下一个有效字符地址
  * @return  NULL表示匹配失败
 ******************************************************************************************************************************/
/******************************************************************************************************************************
  * @brief	 Used for the matching of a specified parameter. The return value is the address of the next valid character where "src" matching succeeded
  * @return  NULL indicates that the matching failed
 ******************************************************************************************************************************/
char *at_strstr(char *src,char *substr);


/******************************************************************************************************************************
  * @brief   用于AT前缀的匹配，返回值一般为source中的参数首地址
  * @return  NULL表示匹配失败
 ******************************************************************************************************************************/
 /******************************************************************************************************************************
  * @brief   It is used for matching AT prefix. The return value is generally the first address of the parameter in "source"
  * @return  NULL indicates that the matching failed
 ******************************************************************************************************************************/
char *at_prefix_strstr(char* source, char* prefix);



/******************************************************************************************************************************
  * @brief   用于带前缀的头部字符串的快速匹配，返回匹配成功后的下一个字符地址，通常用于参数解析的头部跳过。如substr="+PSM: 1,"
  * @return  NULL表示匹配失败
  * @warning 用户禁止使用，仅限芯翼内部使用
 ******************************************************************************************************************************/
char * fast_Strstr(char * source, char * substr);


/******************************************************************************************************************************
  * @brief  通常用于将码流转换成HEX十六进制的字符串,例如AB235E(3 BYTES)---->"AB235E"(7 BYTES,含'\0')
  * @param  src       原始码流
  * @param  src_len   码流长
  * @param  dst       HEX十六进制的字符串
  * @param  dst_size  HEX十六进制的字符串的长度，为src_len的两倍加1，多一字节用于存放字符串结束符'\0'
  ******************************************************************************************************************************/
void bytes2hexstr(unsigned char* src, signed long src_len, char* dst, signed long dst_size);



/******************************************************************************************************************************
  * @brief  通常用于将HEX十六进制的字符串转换成码流,例如"AB235E"---->AB235E(3 BYTES)
  * @param  src       HEX十六进制的字符串
  * @param  src_len   源长度
  * @param  dst       目标码流
  * @param  dst_size  码流长度
  ******************************************************************************************************************************/
int hexstr2bytes(char* src, int src_len, char* dst, int dst_size);



/******************************************************************************************************************************
  * @brief  用于将十六进制字符串数值转换为32位整形数值,例如"0XA358"--->0XA358
  * @warning  该函数也可以使用标准C库函数strtol来代替
  ******************************************************************************************************************************/
int hexstr2int(char *hex,int *value);  


int Get_AT_errno(char *str);


bool Is_AT_Rsp_OK(char *str);

/* 检测是否OK/ERROR结果码*/
bool Is_OK_ERR_rsp(char *str);

