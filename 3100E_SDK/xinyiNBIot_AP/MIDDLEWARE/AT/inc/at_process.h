/*****************************************************************************************************************************
 * @brief  AT命令收发处理机制接口，提供了同步和异步两种机制。其中同步机制会阻塞main主线程一段时间，造成其他事件不能及时处理；
 *         异步机制依靠main主线程循环遍历来处理CP传递来的AT命令，不会阻塞其他事件处理。
*****************************************************************************************************************************/
/*****************************************************************************************************************************
 * @brief  AT command receiving and processing mechanism API,and provides synchronous and asynchronous mechanisms.
 * The synchronization mechanism will block the main thread for a period of time, causing other events to not be processed in time.
 * The asynchronous mechanism relies on the loop traversal of the main thread to process AT command passed from  CP core, and without blocking other event processing.
*****************************************************************************************************************************/

#pragma once

#include <stdint.h>
#include "at_utils.h"
#include "xy_at_api.h"
#include "xy_list.h"
#include "at_ipc_process.h"


// 判断是否为透传模式
#define AT_PASSTHR_MODE                 (HWREGB(BAK_MEM_ATUART_STATE) & 0x01)
// 判断是否为回显模式
#define AT_ECHO_MODE                    (HWREGB(BAK_MEM_ATUART_STATE) & 0x02)


/* 异步AT命令中间结果和结果码 */
extern ListHeader_t asyn_ipc_at_list;

/* CP核发送来同步AT结果码*/
extern ListHeader_t sync_ipc_at_list;

extern ListHeader_t urc_list;


/*************************************************************************************************************************
*同步阻塞机制接口，凡是调用该类型API接口，将会造成main主线程被阻塞，可能影响其他事件的处理。慎用！
*Synchronous blocking mechanism API. If this API is called, the main thread will be blocked, which may affect the processing of other events. Use with caution!
*************************************************************************************************************************/

/******************************************************************************************************************************
  * @brief      AT_Send_And_Get_URC和AT_Send_And_Get_Result的入参timeout参考宏值，用户可根据每条命令差异直接赋值
 ******************************************************************************************************************************/
#define AT_RESPONSE_TIMEOUT          60


/******************************************************************************************************************************
  * @brief  用于发送AT请求，并超时等待相应结果，并可以对URC参数进行格式化解析.不能用于需要远程无线通信的AT命令收发。
  * @param  at_req          待发送的AT请求
  * @param  timeout         秒，发送AT请求后等待结果的超时时长
  * @param  urc_prefix      URC的前缀特征字符串，填NULL表示无URC，仅等待“OK”“ERROR”结果码
  * @param  rsp_fmt         对urc_prefix为前缀的URC参数的解析格式化字符串，接口内部会按照该格式解析每个参数值，类似scanf格式中间结果字符串；
  *                         %d，用于解析整形变量，中间可以携带1/2/4三个数字，分别指示char、short、int三种整形变量，例如%1d
  *                         %s，用于解析字符串参数，由用户保证指针参数内存空间不会越界
  *                         %p，用于解析长字符串参数，直接将字符串首地址赋值给二级指针，以避免一次大内存拷贝
  *                         %h，用于解析16进展码流字符串，接口内部转换为普通码流字符串
  *
  * @note  urc_prefix和rsp_fmt及扩展入参，皆是为URC解析服务的，如果仅关心动作结果码，则入参填NULL即可。
  * @warning  该接口仅用于规整的AT命令和应答，即前缀与请求前缀完全匹配，且参数中不含转义字符等特殊字符！
  * @warning  该接口同步等待最终结果，可能会阻塞main一段时间，进而只能用于短促的AT命令收发，不能用于无线远程通信相关AT命令收发。
  * @warning  3GPP的AT命令，中间结果与OK默认是分开上报的，如果用该接口进行3GPP命令操控，务必将出厂NV参数ucATCacheFlg设为1！
 ******************************************************************************************************************************/
At_status_type AT_Send_And_Get_Rsp(char *at_req, int timeout,char *urc_prefix, char *rsp_fmt, ...);


/*************************************************************************************************************************
*以下为异步非阻塞机制接口，需要在main主线程中轮询处理CP上报来的URC和结果码
*************************************************************************************************************************/



/******************************************************************************************************************************
  * @brief   异步AT命令发送，不死等应答结果。通常用于耗时较久的远程通信相关AT请求的发送，由平台内部实现异步超时监控机制，若超时，则调用Get_AT_Rsp时将返回超时失败。
  * @param   at_req   待发送的AT命令
  * @param   timeout_sec   等待应答的超时秒数，由平台内部RTC实现。若值为0表示不启动后台超时监控，通常用于单向的测试命令。
  * @warning  ！！！必须确保异步AT机制仅在main主线程中一个分支流水线执行，否则会造成两条AT请求同时在等OK的异常！！！
  ******************************************************************************************************************************/
At_status_type Send_AT_Req(char *at_req, int timeout_sec);


/******************************************************************************************************************************
  * @brief   通常用于耗时较久的远程通信相关AT请求的接收处理，非阻塞式机制读取AT响应结果。与Send_AT_Req配对使用，以达到一发一收的效果。
  * @param   urc_prefix   中间结果URC前缀，如果不关心URC，填NULL即可，即最终靠"OK"/"ERROR"进行匹配
  * @param   rsp_fmt   中间结果URC的参数解析的格式化字符串，例如"%s,%d",填NULL表示无需解析参数
  * @return  由于非阻塞机制，进而大概率调用该接口会返回XY_NO_RSP，表示尚未等待CP核应答结果，需要退出到main主线程继续执行
  * @warning  ！！！必须确保异步AT机制仅在main主线程中一个分支流水线执行，否则会造成两条AT请求同时在等OK的异常！！！
 ******************************************************************************************************************************/
At_status_type Get_AT_Rsp(char *urc_prefix, char *rsp_fmt, ...);



/******************************************************************************************************************************
  * @brief   异步方式发送透传数据，并设置期望接收的URC前缀和超时时长
  * @param   data_addr    透传码流
  * @param   datalen      透传码流长度
  * @param   timeout_sec  等待应答的超时秒数，由平台内部RTC实现
  * @return  结果码
  * @note    该接口仅用于AT命令中间过程中，透传码流的实现；普通AT命令禁止使用！
 ******************************************************************************************************************************/
At_status_type Send_Passthr_Data_Req(void *data_addr, uint32_t datalen, int timeout_sec);



